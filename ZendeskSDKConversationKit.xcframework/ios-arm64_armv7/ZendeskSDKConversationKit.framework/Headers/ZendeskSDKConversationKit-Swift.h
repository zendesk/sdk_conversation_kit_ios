#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef ZENDESKSDKCONVERSATIONKIT_SWIFT_H
#define ZENDESKSDKCONVERSATIONKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZendeskSDKConversationKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// The display size of <code>MessageActionItem</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageItemSize, "ActionItemSize", open) {
/// Images are meant to be displayed with a compact layout.
  ZDKMessageItemSizeLarge = 0,
/// Images are meant to be displayed with a large layout.
  ZDKMessageItemSizeCompact = 1,
/// Images are meant to be displayed with no specified layout.
  ZDKMessageItemSizeNone = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKActionType, "ActionType", open) {
/// An action to buy the <code>MessageActionItem</code>.
  ZDKActionTypeBuy = 0,
/// An action with an associated URI.
  ZDKActionTypeLink = 1,
/// An action to request a location.
  ZDKActionTypeLocationRequest = 2,
/// An action to send a postback to the server.
  ZDKActionTypePostback = 3,
/// An action to send a quick reply to the conversation.
  ZDKActionTypeReply = 4,
/// An action to share.
  ZDKActionTypeShare = 5,
/// An action to open the associated URI in a WebView.
  ZDKActionTypeWebview = 6,
};

@class NSString;
enum ZDKActivityType : NSInteger;
enum ZDKAuthorType : NSInteger;
@class NSDate;
@class NSNumber;

SWIFT_CLASS_NAMED("Activity")
@interface ZDKActivity : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum ZDKActivityType type;
@property (nonatomic, readonly) enum ZDKAuthorType authorType;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
@property (nonatomic, readonly, copy) NSString * _Nullable appUserId;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRead;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, ZDKActivityType, "ActivityType", open) {
/// A conversationRead activity
  ZDKActivityTypeConversationRead = 0,
/// A start typing activity
  ZDKActivityTypeTypingStart = 1,
/// A stop typing activity
  ZDKActivityTypeTypingStop = 2,
};

enum ZDKAuthenticationType : NSInteger;

SWIFT_CLASS_NAMED("Authentication")
@interface ZDKAuthentication : NSObject
/// The type of authentication that the current <code>User</code> has
@property (nonatomic) enum ZDKAuthenticationType type;
/// The token for the authentication
@property (nonatomic, copy) NSString * _Nullable token;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKAuthenticationType, "AuthenticationType", open) {
/// Anonymous session
  ZDKAuthenticationTypeSessionToken = 0,
/// JWT authentication
  ZDKAuthenticationTypeJwt = 1,
/// Unauthenticated
  ZDKAuthenticationTypeUnauthenticated = 2,
};


SWIFT_CLASS_NAMED("Author")
@interface ZDKAuthor : NSObject
/// The id of the <code>Author</code>.
/// <ul>
///   <li>
///     Matches <code>User.id</code> if <code>type</code> is <code>AuthorType.user</code>.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The <code>AuthorType</code> of the <code>Author</code>.
@property (nonatomic, readonly) enum ZDKAuthorType type;
/// The name to be displayed for the <code>Author</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// The url of the avatar ot be displayed for the <code>Author</code>.
@property (nonatomic, copy) NSString * _Nullable avatarURL;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId type:(enum ZDKAuthorType)type displayName:(NSString * _Nullable)displayName avatarURL:(NSString * _Nullable)avatarURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKAuthor (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Represents the role of the user on the <code>Message</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKAuthorType, "AuthorType", open) {
/// This indicates a message was sent by a user.
  ZDKAuthorTypeUser = 0,
/// This indicates a message was sent by the business.
  ZDKAuthorTypeBusiness = 1,
};


SWIFT_PROTOCOL_NAMED("MessageAction")
@protocol ZDKMessageAction <NSObject>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@end

enum ZDKMessageActionBuyState : NSInteger;

SWIFT_CLASS_NAMED("BuyAction")
@interface ZDKBuyAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The amount being charged.
@property (nonatomic, readonly) double amount;
/// The currency of the amount being charged.
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
/// The <code>MessageActionBuyState</code> of the action.
@property (nonatomic, readonly) enum ZDKMessageActionBuyState state;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKMessageType : NSInteger;

SWIFT_PROTOCOL_NAMED("Content")
@protocol ZDKMessageContent <NSObject>
@property (nonatomic, readonly) enum ZDKMessageType type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@end

@class ZDKMessageActionItem;

SWIFT_CLASS_NAMED("CarouselMessageContent")
@interface ZDKCarouselMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The action items of the <code>Message</code>.
@property (nonatomic, copy) NSArray<ZDKMessageActionItem *> * _Nonnull messageItems;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Config")
@interface ZDKConfig : NSObject
/// The <code>appId</code> related to the App.
@property (nonatomic, copy) NSString * _Nonnull appId;
/// The <code>baseURL</code> related to the Sunshine Conversations instance.
@property (nonatomic, copy) NSString * _Nonnull baseURL;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId baseURL:(NSString * _Nonnull)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against.
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the current connection state of the client.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Client is disconnected, this is the inital state.
/// It could also be that all connection atempts have failed.
  ZDKConnectionStatusDisconnected = 0,
/// The client is currently connected to the network.
  ZDKConnectionStatusConnected = 1,
/// The client is connecting/re-connecting to realtime connection.
  ZDKConnectionStatusConnectingRealtime = 2,
/// The client is connected to the network and has a realtime connection with the server.
  ZDKConnectionStatusConnectedRealtime = 3,
};


enum ZDKConversationType : NSInteger;
@class ZDKParticipant;
@class ZDKMessage;

SWIFT_CLASS_NAMED("Conversation")
@interface ZDKConversation : NSObject
/// The id of the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Can be <code>personal</code> or <code>group</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum ZDKConversationType type;
/// Whether the <code>Coversation</code> is the “default conversation” for the user.
/// <ul>
///   <li>
///     Is true for the first <code>personal</code> conversation created for the user,  false otherwise.
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isDefault;
/// An optional name for the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// A description that can be used as a subtitle when displaying the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayDescription;
/// A url to an image that can be used as an avatar when displaying the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable iconURL;
/// An array of business ids contributing to the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull business;
/// The business’ last read timestamp of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Represents when the <code>Conversation</code> was marked as read by the appMaker.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSDate * _Nullable businessLastRead;
/// The last updated timestamp of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Represents when the last message was received in the <code>Conversation</code>.
///   </li>
///   <li>
///     Or, the creation time of the <code>Conversation</code> if no messages have been received yet.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSDate * _Nullable lastUpdatedAt;
/// An array of all the <code>Participant</code>s in the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKParticipant *> * _Nonnull participants;
/// An array of all the <code>Message</code>s in the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKMessage *> * _Nonnull messages;
/// Whether there are more messages available than the ones returned
@property (nonatomic, readonly) BOOL hasPrevious;
/// Currently signed user
@property (nonatomic, readonly, strong) ZDKParticipant * _Nullable myself;
/// A most recent <code>Activity</code> for the <code>Conversation</code>
@property (nonatomic, readonly, strong) ZDKActivity * _Nullable activity;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(enum ZDKConversationType)type isDefault:(BOOL)isDefault displayName:(NSString * _Nullable)displayName displayDescription:(NSString * _Nullable)displayDescription iconURL:(NSString * _Nullable)iconURL business:(NSArray<NSString *> * _Nonnull)business businessLastRead:(NSDate * _Nullable)businessLastRead lastUpdatedAt:(NSDate * _Nullable)lastUpdatedAt participants:(NSArray<ZDKParticipant *> * _Nonnull)participants messages:(NSArray<ZDKMessage *> * _Nonnull)messages hasPrevious:(BOOL)hasPrevious myself:(ZDKParticipant * _Nullable)myself activity:(ZDKActivity * _Nullable)activity OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol ZDKConversationKit;

/// Type conforming to <code>ConversationKitBuilderObjC</code> provide methods which vend concrete types of <code>ConversationKitObjC</code>
SWIFT_PROTOCOL_NAMED("ConversationKitBuilderObjC")
@protocol ZDKConversationKitBuilder
/// Returns an initialized type conforming to the <code>ConversationKitObjC</code> protocol
- (id <ZDKConversationKit> _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@class ZDKConversationKitSettings;
@class ZDKUser;

SWIFT_PROTOCOL("_TtP25ZendeskSDKConversationKit21ConversationKitShared_")
@protocol ConversationKitShared
/// Current <code>UUID</code> to identify the host app install
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable clientId;
/// Current <code>Config</code> of <code>ConversationKit</code>.
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, strong) ZDKConfig * _Nullable config;
/// Current <code>ConversationKitSettings</code>.
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, strong) ZDKConversationKitSettings * _Nullable settings;
/// Current <code>User</code> if it exists.
@property (nonatomic, readonly, strong) ZDKUser * _Nullable currentUser;
/// Remove a type of <code>AnyObject</code> from listening to <code>ConversationKitEvent</code> updates.
/// note:
/// If the passed observer is not currently observing, nothing will happen.
/// \param observer Object to remove from observing events.
///
- (void)removeEventObserver:(id _Nonnull)observer;
/// Setup ConversationKit with the given <code>ConversationKitSettings</code>, and <code>Config</code>
/// \param settings <code>ConversationKitSettings</code> that includes the necessary <code>integrationId</code>.
///
/// \param config <code>Config</code> for the app integration
///
- (void)setupWith:(ZDKConversationKitSettings * _Nonnull)settings config:(ZDKConfig * _Nonnull)config;
/// Call to pause the realtime connection that <code>ConversationKit</code> has with the backend.
/// note:
/// After this is called, no updates will be received from the server.
/// This should only be called in situations such as backgrounding the application when
/// the long-running tasks cannot execute due to OS restrictions.
- (void)pause;
/// Call to resume the realtime connection that <code>ConversationKit</code> has with the backend.
/// note:
/// After this is called, updates will start being received from the server.
/// This should only be called when OS restrictions for long-running tasks have been lifted.
- (void)resume;
/// Call to update a push notification token.
/// note:
/// This call will either just store the token if no <code>User</code> is available,
/// or trigger a network request as well as storing the token when a <code>User</code> is available.
/// \param token The push token <code>String</code> that will be sent/stored.
///
- (void)updatePushNotificationToken:(NSString * _Nonnull)token;
@end

enum ZDKConversationKitEvent : NSInteger;

SWIFT_PROTOCOL_NAMED("ConversationKitObjC")
@protocol ZDKConversationKit <ConversationKitShared>
/// Add a type of <code>AnyObject</code> to listen for <code>ZDKConversationKitEvent</code> updates.
/// note:
/// This does not cause a retain cycle.
/// If the passed observer is deinitialized it will be automatically removed from the list.
/// \param observer Object to observe the events.
///
/// \param closure Closure to receive events on.
///
- (void)addEventObserver:(id _Nonnull)observer closure:(void (^ _Nullable)(enum ZDKConversationKitEvent, id _Nullable))closure;
/// Call to initially setup the SDK with the given <code>ConversationKitSettings</code>
/// note:
/// If the SDK is already setup this call will result in an <code>Error</code>.
/// If this call fails, it is necessary to retry until it succeeds to be able to use the SDK.
/// \param settings <code>ConversationKitSettings</code> that includes the necessary <code>integrationId</code>.
///
/// \param completion <code>Config</code> for the app integration if successful, <code>Error</code> if not.
///
- (void)setupWith:(ZDKConversationKitSettings * _Nonnull)settings completion:(void (^ _Nullable)(ZDKConfig * _Nullable, NSError * _Nullable))completion;
/// Call to create an Anonymous <code>ZDKUser</code>. This call will trigger a network.
/// note:
/// If the <code>givenName</code> and <code>surname</code> are empty, an anonymous user with a random name will be created.
/// \param givenName The <code>givenName</code> the user will be identified by.
///
/// \param surname The <code>surname</code> the user will be identified by.
///
/// \param completion Anonymous <code>User</code> for the app if successful, <code>Error</code> if not.
///
- (void)createAnonymousUserWith:(NSString * _Nullable)givenName surname:(NSString * _Nullable)surname completion:(void (^ _Nullable)(ZDKUser * _Nullable, NSError * _Nullable))completion;
/// Call to fetch a <code>Conversation</code> object by its <code>identifier</code>. This call will trigger a network request.
/// \param identifier The identifier of the <code>Conversation</code> object to be retrieved.
///
/// \param completion The <code>Conversation</code> if successful, <code>Error</code> if not.
///
- (void)getConversationWith:(NSString * _Nonnull)identifier completion:(void (^ _Nullable)(ZDKConversation * _Nullable, NSError * _Nullable))completion;
/// Call to send a <code>Message</code>. This call will trigger a network request.
/// \param message The <code>Message</code> that will be sent.
///
/// \param conversationId The id of the <code>Conversation</code> that the <code>Message</code> will be appended to.
///
/// \param completion The sent <code>Message</code> if successful, <code>Error</code> if not.
///
- (void)sendMessageWithMessage:(ZDKMessage * _Nonnull)message conversationId:(NSString * _Nonnull)conversationId completion:(void (^ _Nullable)(ZDKMessage * _Nullable, NSError * _Nullable))completion;
/// Call to send an activity <code>ActivityType</code>
/// Available Activity Types are
/// <ul>
///   <li>
///     <code>conversationRead</code>
///   </li>
///   <li>
///     <code>typingStart</code>
///   </li>
///   <li>
///     <code>typingStop</code>
///   </li>
/// </ul>
/// \param activity the <code>ActivityType</code> that is to be sent
///
/// \param conversationId The identifier of the <code>Conversation</code> that the <code>Activity</code> will be sent
///
- (void)sendConversationActivityWithActivity:(enum ZDKActivityType)activity conversationId:(NSString * _Nonnull)conversationId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Call to authenticate a new user, or re-authenticate an existing user during a conversation.
/// \param jwt The <code>User</code>’s <code>jwt</code>.
///
/// \param completion The <code>User</code> if successful, <code>Error</code> if not.
///
- (void)loginUserWith:(NSString * _Nonnull)jwt completion:(void (^ _Nullable)(ZDKUser * _Nullable, NSError * _Nullable))completion;
/// Call to unauthenticate the current <code>User</code> and remove their associated information from storage.
/// \param completion Nothing if successful, <code>Error</code> if not.
///
- (void)logoutUserWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Call to create a <code>Conversation</code> for the current <code>User</code>.
/// \param completion The <code>Conversation</code> if successful, <code>Error</code> if not.
///
- (void)createConversationWithCompletion:(void (^ _Nullable)(ZDKConversation * _Nullable, NSError * _Nullable))completion;
@end

enum ZDKRegion : NSInteger;

SWIFT_CLASS_NAMED("ConversationKitSettings")
@interface ZDKConversationKitSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationId;
/// Initialize a <code>ConversationKitSettings</code> instance.
/// \param integrationId The iOS integration id for this SDK.
///
/// \param region The region to connect to.
///
/// \param baseURL The server base url.
///
- (nonnull instancetype)initWithIntegrationId:(NSString * _Nonnull)integrationId region:(enum ZDKRegion)region baseURL:(NSString * _Nullable)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The region used to connect to the server.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKRegion, "Region", open) {
  ZDKRegionUs = 0,
  ZDKRegionEu = 1,
};


@interface ZDKConversationKitSettings (SWIFT_EXTENSION(ZendeskSDKConversationKit))
- (nonnull instancetype)initWithIntegrationId:(NSString * _Nonnull)integrationId;
@end


/// Represents the possible types of a <code>Conversation</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConversationType, "ConversationType", open) {
/// A <code>Conversation</code> between the <code>User</code> and the service provider.
  ZDKConversationTypePersonal = 0,
/// A <code>Conversation</code> between multiple people, including the <code>User</code> and the service provider.
  ZDKConversationTypeGroup = 1,
};


SWIFT_CLASS_NAMED("DefaultConversationKitBuilder")
@interface ZDKDefaultConversationKitBuilder : NSObject <ZDKConversationKitBuilder>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKDefaultConversationKitBuilder (SWIFT_EXTENSION(ZendeskSDKConversationKit))
- (id <ZDKConversationKit> _Nonnull)buildWithCallbackQueue:(dispatch_queue_t _Nonnull)callbackQueue SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKFieldType : NSInteger;

/// Objective-C representation of the fields in a <code>Form</code> message
SWIFT_PROTOCOL_NAMED("Field")
@protocol ZDKField <NSObject>
/// The id of the <code>Field</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The value of the field. Maps to the appropriate field that is related to the <code>type</code>.
/// note:
/// Where <code>type</code> is
/// <ul>
///   <li>
///     <code>text</code> - the value is the <code>text</code> field.
///   </li>
///   <li>
///     <code>email</code> - the value is the <code>email</code> field
///   </li>
///   <li>
///     <code>select</code> - the value is the <code>label</code> property of the <code>select</code> field
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@end


SWIFT_CLASS_NAMED("EmailFormField")
@interface ZDKEmailFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The text of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The value of the field. Same as <code>email</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Form field type. <code>text</code>, <code>email</code>, <code>select</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKFieldType, "FieldType", open) {
  ZDKFieldTypeText = 0,
  ZDKFieldTypeEmail = 1,
  ZDKFieldTypeSelect = 2,
};


SWIFT_CLASS_NAMED("FileMessageContent")
@interface ZDKFileMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The alternate text displayed for the <code>Message</code>, used for accessibility.
@property (nonatomic, readonly, copy) NSString * _Nonnull altText;
/// The media URL of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaURL;
/// Media type of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaType;
/// Media size of the <code>Message</code>.
@property (nonatomic, readonly) int64_t mediaSize;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("FormMessageContent")
@interface ZDKFormMessageContent : NSObject <ZDKMessageContent>
/// The id of the <code>Message</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The form fields for this form.
@property (nonatomic, readonly, copy) NSArray<id <ZDKField>> * _Nonnull fields;
/// Boolean that determines if the form should block the input field.
@property (nonatomic, readonly) BOOL blockChatInput;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("FormResponseMessageContent")
@interface ZDKFormResponseMessageContent : NSObject <ZDKMessageContent>
/// The type  of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The message id of the form to which this form response is responding.
@property (nonatomic, readonly, copy) NSString * _Nonnull quotedMessageId;
/// The form fields for this form
@property (nonatomic, readonly, copy) NSArray<id <ZDKField>> * _Nonnull fields;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ImageMessageContent")
@interface ZDKImageMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The media URL of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaURL;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LinkAction")
@interface ZDKLinkAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LocationRequestAction")
@interface ZDKLocationRequestAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKMessageStatus : NSInteger;
@class NSURL;

SWIFT_CLASS_NAMED("Message")
@interface ZDKMessage : NSObject
/// The id of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The content of the <code>Message</code>.
@property (nonatomic, readonly, strong) id <ZDKMessageContent> _Nonnull messageContent;
/// The type of the <code>Message</code>
@property (nonatomic, readonly) enum ZDKMessageType messageType;
/// The timestamp of when the <code>Message</code> was first created.
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
/// The timestamp of when the <code>Message</code> was received from the server.
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedAt;
/// The status of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageStatus status;
/// The <code>User</code> who authored the <code>Message</code>.
@property (nonatomic, readonly, strong) ZDKAuthor * _Nonnull author;
/// The id of the client that the <code>Message</code> originated from.
@property (nonatomic, readonly, copy) NSString * _Nullable sourceId;
/// The locally generated id of the <code>Message</code>, defaults to id.
@property (nonatomic, readonly, copy) NSString * _Nonnull localId;
/// The current valid timestamp for the <code>Message</code>.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// Init for sending a text <code>Message</code>
/// \param text The text to send in the <code>Message</code>
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text payload:(NSString * _Nullable)payload metadata:(NSDictionary<NSString *, NSObject *> * _Nullable)metadata;
/// Failable init for sending a <code>Message</code> that can be sent as an attachment. The type of this message may be either <code>.file</code>, or <code>.image</code>.
/// \param mediaURL Local <code>URL</code> of the file to be sent. This property also determines the type of the message.
///
/// \param text Accompanying text to be sent with the attachment.
///
/// \param metadata <code>Dictionary</code> representing the message metadata
///
- (nullable instancetype)initWithMediaURL:(NSURL * _Nonnull)mediaURL text:(NSString * _Nullable)text metadata:(NSDictionary<NSString *, NSObject *> * _Nullable)metadata;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// note:
/// <code>createdAt</code>  timestamp is not compared here by choice.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// note:
/// <code>createdAt</code> timestamp is not compared here by choice.
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZDKMessage (SWIFT_EXTENSION(ZendeskSDKConversationKit))
/// Returns <code>true</code> if the message originated from given <code>Participant</code>
- (BOOL)isAuthoredBy:(ZDKParticipant * _Nullable)participant SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageActionBuyState, "MessageActionBuyState", open) {
/// The action has been offered.
  ZDKMessageActionBuyStateOffered = 0,
/// The action has been paid for.
  ZDKMessageActionBuyStatePaid = 1,
};


/// An item in a list type message, such as list or carousel.
SWIFT_CLASS_NAMED("MessageActionItem")
@interface ZDKMessageActionItem : NSObject
/// The title of this item.
@property (nonatomic, copy) NSString * _Nonnull title;
/// The description of this item.
@property (nonatomic, copy) NSString * _Nonnull itemDescription;
/// The URL of the media to be displayed with this item.
@property (nonatomic, copy) NSString * _Nonnull mediaURL;
/// The type of the media referenced by the [mediaUrl], e.g. “image/jpeg”.
@property (nonatomic, copy) NSString * _Nonnull mediaType;
/// An array of <code>MessageAction</code> to be displayed with this item.
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nonnull messageActions;
/// The <code>MessageItemSize</code> of the item that should be displayed.
@property (nonatomic, readonly) enum ZDKMessageItemSize size;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the status of the <code>Message</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageStatus, "MessageStatus", open) {
/// The <code>Message</code> has not yet been sent to the server.
  ZDKMessageStatusPending = 0,
/// The <code>Message</code> has been sent to the server successfully.
  ZDKMessageStatusSent = 1,
/// An attempt was made to send the <code>Message</code> to the server but it failed.
  ZDKMessageStatusFailed = 2,
/// An attempt was made to send the <code>Message</code> to the server but it failed becasue the file size exceeds the max file size.
  ZDKMessageStatusExceedsMaxFileSize = 3,
/// An attempt was made to send the <code>Message</code> to the server but it failed becasue it is an unsupported file type.
  ZDKMessageStatusFailedAttachmentNotSupported = 4,
};

/// Represents the different <code>Message</code> types in a <code>Conversation</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageType, "MessageType", open) {
/// A text message in a <code>Conversation</code>.
  ZDKMessageTypeText = 0,
/// An attachment in a <code>Conversation</code>.
  ZDKMessageTypeFile = 1,
/// An image in a <code>Conversation</code>.
  ZDKMessageTypeImage = 2,
/// A carousel in a <code>Conversation</code>.
  ZDKMessageTypeCarousel = 3,
/// A list in a <code>Conversation</code>,
  ZDKMessageTypeList = 4,
/// A location in a <code>Conversation</code>.
  ZDKMessageTypeLocation = 5,
/// A form in a <code>Conversation</code>.
  ZDKMessageTypeForm = 6,
/// The response to a <code>form</code> that was previously sent in a <code>Conversation</code>
  ZDKMessageTypeFormResponse = 7,
/// An unsupported message type.
  ZDKMessageTypeUnsupported = 8,
};


SWIFT_CLASS_NAMED("Option")
@interface ZDKOption : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("Participant")
@interface ZDKParticipant : NSObject
/// The id of the <code>Participant</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the associated <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull appUserId;
/// The number of messages the <code>Participant</code> has not yet read
@property (nonatomic, readonly) NSInteger unreadCount;
/// The timestamp of the last read message
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRead;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("PostbackAction")
@interface ZDKPostbackAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload to be sent with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RealtimeSettings")
@interface ZDKRealtimeSettings : NSObject
/// URL for the realtime connection.
@property (nonatomic, copy) NSString * _Nonnull baseURL;
/// Intervals in which it should retry connection.
@property (nonatomic) NSTimeInterval retryInterval;
/// How many times it should retry connection.
@property (nonatomic) NSInteger maxConnectionAttempts;
/// A delay for when the connect should be called.
@property (nonatomic) NSTimeInterval connectionDelay;
/// If the realtime connection is enabled.
@property (nonatomic) BOOL enabled;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ReplyAction")
@interface ZDKReplyAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload to be sent with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/// The URL of an icon to render next to the button.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SelectFormField")
@interface ZDKSelectFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The subset of <code>options</code> that were chosen by the user
@property (nonatomic, readonly, copy) NSArray<ZDKOption *> * _Nullable select;
/// Array of objects representing the response for a field of type <code>select</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKOption *> * _Nonnull options;
/// The value of the field. Same as the <code>select</code> <code>label</code> property
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKSelectFormField (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly) NSInteger selectSizeObjc;
@end



SWIFT_CLASS_NAMED("ShareAction")
@interface ZDKShareAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TextFormField")
@interface ZDKTextFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The text value of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The value of the field. Same as <code>text</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZDKTextFormField (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly) NSInteger minSizeObjc;
@property (nonatomic, readonly) NSInteger maxSizeObjc;
@end


SWIFT_CLASS_NAMED("TextMessageContent")
@interface ZDKTextMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload of the <code>Message</code>
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("UnsupportedMessageContent")
@interface ZDKUnsupportedMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("User")
@interface ZDKUser : NSObject
/// The <code>id</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>givenName</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull givenName;
/// The <code>surName</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull surname;
/// The <code>locale</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
/// The <code>externalId</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull externalId;
/// The <code>conversations</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSArray<ZDKConversation *> * _Nonnull conversations;
/// The <code>realtimeSettings</code> of the <code>User</code>
@property (nonatomic, readonly, strong) ZDKRealtimeSettings * _Nonnull realtimeSettings;
/// The <code>authentication</code> of the <code>User</code>
@property (nonatomic, readonly, strong) ZDKAuthentication * _Nonnull authentication;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("WebViewAction")
@interface ZDKWebViewAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The action fallback uri.
@property (nonatomic, readonly, copy) NSString * _Nonnull fallback;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of events that covers all events that could come from <code>ConversationKit</code>.
typedef SWIFT_ENUM(NSInteger, ZDKConversationKitEvent, open) {
/// A connection status change event can come from Reachability or Realtime connection.
  ZDKConversationKitEventConnectionStatusChanged = 0,
/// The <code>User</code> has been updated.
  ZDKConversationKitEventUserUpdated = 1,
/// <code>UserAccess</code> has been revoked.
  ZDKConversationKitEventUserAccessRevoked = 2,
/// <code>Conversation</code> has been updated.
  ZDKConversationKitEventConversationUpdated = 3,
/// New <code>Message</code> received for <code>Conversation</code> with identifier.
  ZDKConversationKitEventNewMessage = 4,
/// Existing <code>Message</code> updated for <code>Conversation</code> with identifier.
  ZDKConversationKitEventMessageUpdated = 5,
/// The push token ‘String’ was stored.
  ZDKConversationKitEventPushTokenPrepared = 6,
/// The result of the call to update the push token <code>String</code> with possible <code>Error</code>.
  ZDKConversationKitEventPushTokenUpdateResult = 7,
/// The result of the login call with possible <code>Error</code>.
  ZDKConversationKitEventLoginResult = 8,
/// The result of the logout call with possible <code>Error</code>.
  ZDKConversationKitEventLogoutResult = 9,
/// The <code>User</code> has been retrieved from storage.
  ZDKConversationKitEventPersistedUserRetrieved = 10,
/// Conversation read activity received from server for <code>conversationId</code>.
  ZDKConversationKitEventConversationReadReceived = 11,
};


SWIFT_CLASS("_TtC25ZendeskSDKConversationKit14ZDKLoginResult")
@interface ZDKLoginResult : NSObject
/// The <code>User</code> object if authentication was successful.
@property (nonatomic, readonly, strong) ZDKUser * _Nullable user;
/// The error that occurred if there was a problem authenticating the <code>User</code>.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper object for Obj-C to return the associated types of the <code>newMessage</code> and <code>messageUpdated</code> events.
SWIFT_CLASS("_TtC25ZendeskSDKConversationKit15ZDKMessageEvent")
@interface ZDKMessageEvent : NSObject
/// The received/updated <code>Message</code>.
@property (nonatomic, readonly, strong) ZDKMessage * _Nonnull message;
/// The identifier of the <code>Conversation</code> that the messages belong to.
@property (nonatomic, readonly, copy) NSString * _Nonnull conversationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC25ZendeskSDKConversationKit17ZDKPushTokenEvent")
@interface ZDKPushTokenEvent : NSObject
/// The push token <code>String</code> that was sent to be updated.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// The error that occurred if there was a problem updating the token.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef ZENDESKSDKCONVERSATIONKIT_SWIFT_H
#define ZENDESKSDKCONVERSATIONKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZendeskSDKConversationKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// The display size of <code>MessageActionItem</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageItemSize, "ActionItemSize", open) {
/// Images are meant to be displayed with a compact layout.
  ZDKMessageItemSizeLarge = 0,
/// Images are meant to be displayed with a large layout.
  ZDKMessageItemSizeCompact = 1,
/// Images are meant to be displayed with no specified layout.
  ZDKMessageItemSizeNone = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKActionType, "ActionType", open) {
/// An action to buy the <code>MessageActionItem</code>.
  ZDKActionTypeBuy = 0,
/// An action with an associated URI.
  ZDKActionTypeLink = 1,
/// An action to request a location.
  ZDKActionTypeLocationRequest = 2,
/// An action to send a postback to the server.
  ZDKActionTypePostback = 3,
/// An action to send a quick reply to the conversation.
  ZDKActionTypeReply = 4,
/// An action to share.
  ZDKActionTypeShare = 5,
/// An action to open the associated URI in a WebView.
  ZDKActionTypeWebview = 6,
};

@class NSString;
enum ZDKActivityType : NSInteger;
enum ZDKAuthorType : NSInteger;
@class NSDate;
@class NSNumber;

SWIFT_CLASS_NAMED("Activity")
@interface ZDKActivity : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly) enum ZDKActivityType type;
@property (nonatomic, readonly) enum ZDKAuthorType authorType;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
@property (nonatomic, readonly, copy) NSString * _Nullable appUserId;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRead;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, ZDKActivityType, "ActivityType", open) {
/// A conversationRead activity
  ZDKActivityTypeConversationRead = 0,
/// A start typing activity
  ZDKActivityTypeTypingStart = 1,
/// A stop typing activity
  ZDKActivityTypeTypingStop = 2,
};

enum ZDKAuthenticationType : NSInteger;

SWIFT_CLASS_NAMED("Authentication")
@interface ZDKAuthentication : NSObject
/// The type of authentication that the current <code>User</code> has
@property (nonatomic) enum ZDKAuthenticationType type;
/// The token for the authentication
@property (nonatomic, copy) NSString * _Nullable token;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKAuthenticationType, "AuthenticationType", open) {
/// Anonymous session
  ZDKAuthenticationTypeSessionToken = 0,
/// JWT authentication
  ZDKAuthenticationTypeJwt = 1,
/// Unauthenticated
  ZDKAuthenticationTypeUnauthenticated = 2,
};


SWIFT_CLASS_NAMED("Author")
@interface ZDKAuthor : NSObject
/// The id of the <code>Author</code>.
/// <ul>
///   <li>
///     Matches <code>User.id</code> if <code>type</code> is <code>AuthorType.user</code>.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// The <code>AuthorType</code> of the <code>Author</code>.
@property (nonatomic, readonly) enum ZDKAuthorType type;
/// The name to be displayed for the <code>Author</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// The url of the avatar ot be displayed for the <code>Author</code>.
@property (nonatomic, copy) NSString * _Nullable avatarURL;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId type:(enum ZDKAuthorType)type displayName:(NSString * _Nullable)displayName avatarURL:(NSString * _Nullable)avatarURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKAuthor (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Represents the role of the user on the <code>Message</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKAuthorType, "AuthorType", open) {
/// This indicates a message was sent by a user.
  ZDKAuthorTypeUser = 0,
/// This indicates a message was sent by the business.
  ZDKAuthorTypeBusiness = 1,
};


SWIFT_PROTOCOL_NAMED("MessageAction")
@protocol ZDKMessageAction <NSObject>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@end

enum ZDKMessageActionBuyState : NSInteger;

SWIFT_CLASS_NAMED("BuyAction")
@interface ZDKBuyAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The amount being charged.
@property (nonatomic, readonly) double amount;
/// The currency of the amount being charged.
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
/// The <code>MessageActionBuyState</code> of the action.
@property (nonatomic, readonly) enum ZDKMessageActionBuyState state;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKMessageType : NSInteger;

SWIFT_PROTOCOL_NAMED("Content")
@protocol ZDKMessageContent <NSObject>
@property (nonatomic, readonly) enum ZDKMessageType type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@end

@class ZDKMessageActionItem;

SWIFT_CLASS_NAMED("CarouselMessageContent")
@interface ZDKCarouselMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The action items of the <code>Message</code>.
@property (nonatomic, copy) NSArray<ZDKMessageActionItem *> * _Nonnull messageItems;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Config")
@interface ZDKConfig : NSObject
/// The <code>appId</code> related to the App.
@property (nonatomic, copy) NSString * _Nonnull appId;
/// The <code>baseURL</code> related to the Sunshine Conversations instance.
@property (nonatomic, copy) NSString * _Nonnull baseURL;
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId baseURL:(NSString * _Nonnull)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against.
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the current connection state of the client.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Client is disconnected, this is the inital state.
/// It could also be that all connection atempts have failed.
  ZDKConnectionStatusDisconnected = 0,
/// The client is currently connected to the network.
  ZDKConnectionStatusConnected = 1,
/// The client is connecting/re-connecting to realtime connection.
  ZDKConnectionStatusConnectingRealtime = 2,
/// The client is connected to the network and has a realtime connection with the server.
  ZDKConnectionStatusConnectedRealtime = 3,
};


enum ZDKConversationType : NSInteger;
@class ZDKParticipant;
@class ZDKMessage;

SWIFT_CLASS_NAMED("Conversation")
@interface ZDKConversation : NSObject
/// The id of the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Can be <code>personal</code> or <code>group</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum ZDKConversationType type;
/// Whether the <code>Coversation</code> is the “default conversation” for the user.
/// <ul>
///   <li>
///     Is true for the first <code>personal</code> conversation created for the user,  false otherwise.
///   </li>
/// </ul>
@property (nonatomic, readonly) BOOL isDefault;
/// An optional name for the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// A description that can be used as a subtitle when displaying the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable displayDescription;
/// A url to an image that can be used as an avatar when displaying the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable iconURL;
/// An array of business ids contributing to the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull business;
/// The business’ last read timestamp of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Represents when the <code>Conversation</code> was marked as read by the appMaker.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSDate * _Nullable businessLastRead;
/// The last updated timestamp of the <code>Conversation</code>.
/// <ul>
///   <li>
///     Represents when the last message was received in the <code>Conversation</code>.
///   </li>
///   <li>
///     Or, the creation time of the <code>Conversation</code> if no messages have been received yet.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSDate * _Nullable lastUpdatedAt;
/// An array of all the <code>Participant</code>s in the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKParticipant *> * _Nonnull participants;
/// An array of all the <code>Message</code>s in the <code>Conversation</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKMessage *> * _Nonnull messages;
/// Whether there are more messages available than the ones returned
@property (nonatomic, readonly) BOOL hasPrevious;
/// Currently signed user
@property (nonatomic, readonly, strong) ZDKParticipant * _Nullable myself;
/// A most recent <code>Activity</code> for the <code>Conversation</code>
@property (nonatomic, readonly, strong) ZDKActivity * _Nullable activity;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(enum ZDKConversationType)type isDefault:(BOOL)isDefault displayName:(NSString * _Nullable)displayName displayDescription:(NSString * _Nullable)displayDescription iconURL:(NSString * _Nullable)iconURL business:(NSArray<NSString *> * _Nonnull)business businessLastRead:(NSDate * _Nullable)businessLastRead lastUpdatedAt:(NSDate * _Nullable)lastUpdatedAt participants:(NSArray<ZDKParticipant *> * _Nonnull)participants messages:(NSArray<ZDKMessage *> * _Nonnull)messages hasPrevious:(BOOL)hasPrevious myself:(ZDKParticipant * _Nullable)myself activity:(ZDKActivity * _Nullable)activity OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol ZDKConversationKit;

/// Type conforming to <code>ConversationKitBuilderObjC</code> provide methods which vend concrete types of <code>ConversationKitObjC</code>
SWIFT_PROTOCOL_NAMED("ConversationKitBuilderObjC")
@protocol ZDKConversationKitBuilder
/// Returns an initialized type conforming to the <code>ConversationKitObjC</code> protocol
- (id <ZDKConversationKit> _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@class ZDKConversationKitSettings;
@class ZDKUser;

SWIFT_PROTOCOL("_TtP25ZendeskSDKConversationKit21ConversationKitShared_")
@protocol ConversationKitShared
/// Current <code>UUID</code> to identify the host app install
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable clientId;
/// Current <code>Config</code> of <code>ConversationKit</code>.
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, strong) ZDKConfig * _Nullable config;
/// Current <code>ConversationKitSettings</code>.
/// note:
/// This will be only available after successful <code>setup(with:result)</code>.
@property (nonatomic, readonly, strong) ZDKConversationKitSettings * _Nullable settings;
/// Current <code>User</code> if it exists.
@property (nonatomic, readonly, strong) ZDKUser * _Nullable currentUser;
/// Remove a type of <code>AnyObject</code> from listening to <code>ConversationKitEvent</code> updates.
/// note:
/// If the passed observer is not currently observing, nothing will happen.
/// \param observer Object to remove from observing events.
///
- (void)removeEventObserver:(id _Nonnull)observer;
/// Setup ConversationKit with the given <code>ConversationKitSettings</code>, and <code>Config</code>
/// \param settings <code>ConversationKitSettings</code> that includes the necessary <code>integrationId</code>.
///
/// \param config <code>Config</code> for the app integration
///
- (void)setupWith:(ZDKConversationKitSettings * _Nonnull)settings config:(ZDKConfig * _Nonnull)config;
/// Call to pause the realtime connection that <code>ConversationKit</code> has with the backend.
/// note:
/// After this is called, no updates will be received from the server.
/// This should only be called in situations such as backgrounding the application when
/// the long-running tasks cannot execute due to OS restrictions.
- (void)pause;
/// Call to resume the realtime connection that <code>ConversationKit</code> has with the backend.
/// note:
/// After this is called, updates will start being received from the server.
/// This should only be called when OS restrictions for long-running tasks have been lifted.
- (void)resume;
/// Call to update a push notification token.
/// note:
/// This call will either just store the token if no <code>User</code> is available,
/// or trigger a network request as well as storing the token when a <code>User</code> is available.
/// \param token The push token <code>String</code> that will be sent/stored.
///
- (void)updatePushNotificationToken:(NSString * _Nonnull)token;
@end

enum ZDKConversationKitEvent : NSInteger;

SWIFT_PROTOCOL_NAMED("ConversationKitObjC")
@protocol ZDKConversationKit <ConversationKitShared>
/// Add a type of <code>AnyObject</code> to listen for <code>ZDKConversationKitEvent</code> updates.
/// note:
/// This does not cause a retain cycle.
/// If the passed observer is deinitialized it will be automatically removed from the list.
/// \param observer Object to observe the events.
///
/// \param closure Closure to receive events on.
///
- (void)addEventObserver:(id _Nonnull)observer closure:(void (^ _Nullable)(enum ZDKConversationKitEvent, id _Nullable))closure;
/// Call to initially setup the SDK with the given <code>ConversationKitSettings</code>
/// note:
/// If the SDK is already setup this call will result in an <code>Error</code>.
/// If this call fails, it is necessary to retry until it succeeds to be able to use the SDK.
/// \param settings <code>ConversationKitSettings</code> that includes the necessary <code>integrationId</code>.
///
/// \param completion <code>Config</code> for the app integration if successful, <code>Error</code> if not.
///
- (void)setupWith:(ZDKConversationKitSettings * _Nonnull)settings completion:(void (^ _Nullable)(ZDKConfig * _Nullable, NSError * _Nullable))completion;
/// Call to create an Anonymous <code>ZDKUser</code>. This call will trigger a network.
/// note:
/// If the <code>givenName</code> and <code>surname</code> are empty, an anonymous user with a random name will be created.
/// \param givenName The <code>givenName</code> the user will be identified by.
///
/// \param surname The <code>surname</code> the user will be identified by.
///
/// \param completion Anonymous <code>User</code> for the app if successful, <code>Error</code> if not.
///
- (void)createAnonymousUserWith:(NSString * _Nullable)givenName surname:(NSString * _Nullable)surname completion:(void (^ _Nullable)(ZDKUser * _Nullable, NSError * _Nullable))completion;
/// Call to fetch a <code>Conversation</code> object by its <code>identifier</code>. This call will trigger a network request.
/// \param identifier The identifier of the <code>Conversation</code> object to be retrieved.
///
/// \param completion The <code>Conversation</code> if successful, <code>Error</code> if not.
///
- (void)getConversationWith:(NSString * _Nonnull)identifier completion:(void (^ _Nullable)(ZDKConversation * _Nullable, NSError * _Nullable))completion;
/// Call to send a <code>Message</code>. This call will trigger a network request.
/// \param message The <code>Message</code> that will be sent.
///
/// \param conversationId The id of the <code>Conversation</code> that the <code>Message</code> will be appended to.
///
/// \param completion The sent <code>Message</code> if successful, <code>Error</code> if not.
///
- (void)sendMessageWithMessage:(ZDKMessage * _Nonnull)message conversationId:(NSString * _Nonnull)conversationId completion:(void (^ _Nullable)(ZDKMessage * _Nullable, NSError * _Nullable))completion;
/// Call to send an activity <code>ActivityType</code>
/// Available Activity Types are
/// <ul>
///   <li>
///     <code>conversationRead</code>
///   </li>
///   <li>
///     <code>typingStart</code>
///   </li>
///   <li>
///     <code>typingStop</code>
///   </li>
/// </ul>
/// \param activity the <code>ActivityType</code> that is to be sent
///
/// \param conversationId The identifier of the <code>Conversation</code> that the <code>Activity</code> will be sent
///
- (void)sendConversationActivityWithActivity:(enum ZDKActivityType)activity conversationId:(NSString * _Nonnull)conversationId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Call to authenticate a new user, or re-authenticate an existing user during a conversation.
/// \param jwt The <code>User</code>’s <code>jwt</code>.
///
/// \param completion The <code>User</code> if successful, <code>Error</code> if not.
///
- (void)loginUserWith:(NSString * _Nonnull)jwt completion:(void (^ _Nullable)(ZDKUser * _Nullable, NSError * _Nullable))completion;
/// Call to unauthenticate the current <code>User</code> and remove their associated information from storage.
/// \param completion Nothing if successful, <code>Error</code> if not.
///
- (void)logoutUserWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Call to create a <code>Conversation</code> for the current <code>User</code>.
/// \param completion The <code>Conversation</code> if successful, <code>Error</code> if not.
///
- (void)createConversationWithCompletion:(void (^ _Nullable)(ZDKConversation * _Nullable, NSError * _Nullable))completion;
@end

enum ZDKRegion : NSInteger;

SWIFT_CLASS_NAMED("ConversationKitSettings")
@interface ZDKConversationKitSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationId;
/// Initialize a <code>ConversationKitSettings</code> instance.
/// \param integrationId The iOS integration id for this SDK.
///
/// \param region The region to connect to.
///
/// \param baseURL The server base url.
///
- (nonnull instancetype)initWithIntegrationId:(NSString * _Nonnull)integrationId region:(enum ZDKRegion)region baseURL:(NSString * _Nullable)baseURL OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The region used to connect to the server.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKRegion, "Region", open) {
  ZDKRegionUs = 0,
  ZDKRegionEu = 1,
};


@interface ZDKConversationKitSettings (SWIFT_EXTENSION(ZendeskSDKConversationKit))
- (nonnull instancetype)initWithIntegrationId:(NSString * _Nonnull)integrationId;
@end


/// Represents the possible types of a <code>Conversation</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConversationType, "ConversationType", open) {
/// A <code>Conversation</code> between the <code>User</code> and the service provider.
  ZDKConversationTypePersonal = 0,
/// A <code>Conversation</code> between multiple people, including the <code>User</code> and the service provider.
  ZDKConversationTypeGroup = 1,
};


SWIFT_CLASS_NAMED("DefaultConversationKitBuilder")
@interface ZDKDefaultConversationKitBuilder : NSObject <ZDKConversationKitBuilder>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKDefaultConversationKitBuilder (SWIFT_EXTENSION(ZendeskSDKConversationKit))
- (id <ZDKConversationKit> _Nonnull)buildWithCallbackQueue:(dispatch_queue_t _Nonnull)callbackQueue SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKFieldType : NSInteger;

/// Objective-C representation of the fields in a <code>Form</code> message
SWIFT_PROTOCOL_NAMED("Field")
@protocol ZDKField <NSObject>
/// The id of the <code>Field</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The value of the field. Maps to the appropriate field that is related to the <code>type</code>.
/// note:
/// Where <code>type</code> is
/// <ul>
///   <li>
///     <code>text</code> - the value is the <code>text</code> field.
///   </li>
///   <li>
///     <code>email</code> - the value is the <code>email</code> field
///   </li>
///   <li>
///     <code>select</code> - the value is the <code>label</code> property of the <code>select</code> field
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@end


SWIFT_CLASS_NAMED("EmailFormField")
@interface ZDKEmailFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The text of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The value of the field. Same as <code>email</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Form field type. <code>text</code>, <code>email</code>, <code>select</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKFieldType, "FieldType", open) {
  ZDKFieldTypeText = 0,
  ZDKFieldTypeEmail = 1,
  ZDKFieldTypeSelect = 2,
};


SWIFT_CLASS_NAMED("FileMessageContent")
@interface ZDKFileMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The alternate text displayed for the <code>Message</code>, used for accessibility.
@property (nonatomic, readonly, copy) NSString * _Nonnull altText;
/// The media URL of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaURL;
/// Media type of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaType;
/// Media size of the <code>Message</code>.
@property (nonatomic, readonly) int64_t mediaSize;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("FormMessageContent")
@interface ZDKFormMessageContent : NSObject <ZDKMessageContent>
/// The id of the <code>Message</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The form fields for this form.
@property (nonatomic, readonly, copy) NSArray<id <ZDKField>> * _Nonnull fields;
/// Boolean that determines if the form should block the input field.
@property (nonatomic, readonly) BOOL blockChatInput;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("FormResponseMessageContent")
@interface ZDKFormResponseMessageContent : NSObject <ZDKMessageContent>
/// The type  of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The message id of the form to which this form response is responding.
@property (nonatomic, readonly, copy) NSString * _Nonnull quotedMessageId;
/// The form fields for this form
@property (nonatomic, readonly, copy) NSArray<id <ZDKField>> * _Nonnull fields;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ImageMessageContent")
@interface ZDKImageMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The media URL of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mediaURL;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LinkAction")
@interface ZDKLinkAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LocationRequestAction")
@interface ZDKLocationRequestAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKMessageStatus : NSInteger;
@class NSURL;

SWIFT_CLASS_NAMED("Message")
@interface ZDKMessage : NSObject
/// The id of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The content of the <code>Message</code>.
@property (nonatomic, readonly, strong) id <ZDKMessageContent> _Nonnull messageContent;
/// The type of the <code>Message</code>
@property (nonatomic, readonly) enum ZDKMessageType messageType;
/// The timestamp of when the <code>Message</code> was first created.
@property (nonatomic, readonly, copy) NSDate * _Nullable createdAt;
/// The timestamp of when the <code>Message</code> was received from the server.
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedAt;
/// The status of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageStatus status;
/// The <code>User</code> who authored the <code>Message</code>.
@property (nonatomic, readonly, strong) ZDKAuthor * _Nonnull author;
/// The id of the client that the <code>Message</code> originated from.
@property (nonatomic, readonly, copy) NSString * _Nullable sourceId;
/// The locally generated id of the <code>Message</code>, defaults to id.
@property (nonatomic, readonly, copy) NSString * _Nonnull localId;
/// The current valid timestamp for the <code>Message</code>.
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// Init for sending a text <code>Message</code>
/// \param text The text to send in the <code>Message</code>
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text payload:(NSString * _Nullable)payload metadata:(NSDictionary<NSString *, NSObject *> * _Nullable)metadata;
/// Failable init for sending a <code>Message</code> that can be sent as an attachment. The type of this message may be either <code>.file</code>, or <code>.image</code>.
/// \param mediaURL Local <code>URL</code> of the file to be sent. This property also determines the type of the message.
///
/// \param text Accompanying text to be sent with the attachment.
///
/// \param metadata <code>Dictionary</code> representing the message metadata
///
- (nullable instancetype)initWithMediaURL:(NSURL * _Nonnull)mediaURL text:(NSString * _Nullable)text metadata:(NSDictionary<NSString *, NSObject *> * _Nullable)metadata;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// note:
/// <code>createdAt</code>  timestamp is not compared here by choice.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// note:
/// <code>createdAt</code> timestamp is not compared here by choice.
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZDKMessage (SWIFT_EXTENSION(ZendeskSDKConversationKit))
/// Returns <code>true</code> if the message originated from given <code>Participant</code>
- (BOOL)isAuthoredBy:(ZDKParticipant * _Nullable)participant SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageActionBuyState, "MessageActionBuyState", open) {
/// The action has been offered.
  ZDKMessageActionBuyStateOffered = 0,
/// The action has been paid for.
  ZDKMessageActionBuyStatePaid = 1,
};


/// An item in a list type message, such as list or carousel.
SWIFT_CLASS_NAMED("MessageActionItem")
@interface ZDKMessageActionItem : NSObject
/// The title of this item.
@property (nonatomic, copy) NSString * _Nonnull title;
/// The description of this item.
@property (nonatomic, copy) NSString * _Nonnull itemDescription;
/// The URL of the media to be displayed with this item.
@property (nonatomic, copy) NSString * _Nonnull mediaURL;
/// The type of the media referenced by the [mediaUrl], e.g. “image/jpeg”.
@property (nonatomic, copy) NSString * _Nonnull mediaType;
/// An array of <code>MessageAction</code> to be displayed with this item.
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nonnull messageActions;
/// The <code>MessageItemSize</code> of the item that should be displayed.
@property (nonatomic, readonly) enum ZDKMessageItemSize size;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the status of the <code>Message</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageStatus, "MessageStatus", open) {
/// The <code>Message</code> has not yet been sent to the server.
  ZDKMessageStatusPending = 0,
/// The <code>Message</code> has been sent to the server successfully.
  ZDKMessageStatusSent = 1,
/// An attempt was made to send the <code>Message</code> to the server but it failed.
  ZDKMessageStatusFailed = 2,
/// An attempt was made to send the <code>Message</code> to the server but it failed becasue the file size exceeds the max file size.
  ZDKMessageStatusExceedsMaxFileSize = 3,
/// An attempt was made to send the <code>Message</code> to the server but it failed becasue it is an unsupported file type.
  ZDKMessageStatusFailedAttachmentNotSupported = 4,
};

/// Represents the different <code>Message</code> types in a <code>Conversation</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKMessageType, "MessageType", open) {
/// A text message in a <code>Conversation</code>.
  ZDKMessageTypeText = 0,
/// An attachment in a <code>Conversation</code>.
  ZDKMessageTypeFile = 1,
/// An image in a <code>Conversation</code>.
  ZDKMessageTypeImage = 2,
/// A carousel in a <code>Conversation</code>.
  ZDKMessageTypeCarousel = 3,
/// A list in a <code>Conversation</code>,
  ZDKMessageTypeList = 4,
/// A location in a <code>Conversation</code>.
  ZDKMessageTypeLocation = 5,
/// A form in a <code>Conversation</code>.
  ZDKMessageTypeForm = 6,
/// The response to a <code>form</code> that was previously sent in a <code>Conversation</code>
  ZDKMessageTypeFormResponse = 7,
/// An unsupported message type.
  ZDKMessageTypeUnsupported = 8,
};


SWIFT_CLASS_NAMED("Option")
@interface ZDKOption : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("Participant")
@interface ZDKParticipant : NSObject
/// The id of the <code>Participant</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the associated <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull appUserId;
/// The number of messages the <code>Participant</code> has not yet read
@property (nonatomic, readonly) NSInteger unreadCount;
/// The timestamp of the last read message
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRead;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("PostbackAction")
@interface ZDKPostbackAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload to be sent with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RealtimeSettings")
@interface ZDKRealtimeSettings : NSObject
/// URL for the realtime connection.
@property (nonatomic, copy) NSString * _Nonnull baseURL;
/// Intervals in which it should retry connection.
@property (nonatomic) NSTimeInterval retryInterval;
/// How many times it should retry connection.
@property (nonatomic) NSInteger maxConnectionAttempts;
/// A delay for when the connect should be called.
@property (nonatomic) NSTimeInterval connectionDelay;
/// If the realtime connection is enabled.
@property (nonatomic) BOOL enabled;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ReplyAction")
@interface ZDKReplyAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload to be sent with the result.
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/// The URL of an icon to render next to the button.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SelectFormField")
@interface ZDKSelectFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The subset of <code>options</code> that were chosen by the user
@property (nonatomic, readonly, copy) NSArray<ZDKOption *> * _Nullable select;
/// Array of objects representing the response for a field of type <code>select</code>.
@property (nonatomic, readonly, copy) NSArray<ZDKOption *> * _Nonnull options;
/// The value of the field. Same as the <code>select</code> <code>label</code> property
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKSelectFormField (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly) NSInteger selectSizeObjc;
@end



SWIFT_CLASS_NAMED("ShareAction")
@interface ZDKShareAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("TextFormField")
@interface ZDKTextFormField : NSObject <ZDKField>
/// The field type.
@property (nonatomic, readonly) enum ZDKFieldType type;
/// The id of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The text value of the <code>Field</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The name of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The label of the field. Must be unique per <code>form</code> or <code>formResponse</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Placeholder text for the field.
@property (nonatomic, readonly, copy) NSString * _Nullable placeholder;
/// The value of the field. Same as <code>text</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZDKTextFormField (SWIFT_EXTENSION(ZendeskSDKConversationKit))
@property (nonatomic, readonly) NSInteger minSizeObjc;
@property (nonatomic, readonly) NSInteger maxSizeObjc;
@end


SWIFT_CLASS_NAMED("TextMessageContent")
@interface ZDKTextMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The text of the <code>Message</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The payload of the <code>Message</code>
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
/// Any actions associated with the message
@property (nonatomic, readonly, copy) NSArray<id <ZDKMessageAction>> * _Nullable messageActions;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("UnsupportedMessageContent")
@interface ZDKUnsupportedMessageContent : NSObject <ZDKMessageContent>
/// The type of the <code>Message</code>.
@property (nonatomic, readonly) enum ZDKMessageType type;
/// The metadata of the <code>Message</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("User")
@interface ZDKUser : NSObject
/// The <code>id</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>givenName</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull givenName;
/// The <code>surName</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull surname;
/// The <code>locale</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
/// The <code>externalId</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull externalId;
/// The <code>conversations</code> of the <code>User</code>
@property (nonatomic, readonly, copy) NSArray<ZDKConversation *> * _Nonnull conversations;
/// The <code>realtimeSettings</code> of the <code>User</code>
@property (nonatomic, readonly, strong) ZDKRealtimeSettings * _Nonnull realtimeSettings;
/// The <code>authentication</code> of the <code>User</code>
@property (nonatomic, readonly, strong) ZDKAuthentication * _Nonnull authentication;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("WebViewAction")
@interface ZDKWebViewAction : NSObject <ZDKMessageAction>
/// The resource id of this action.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The <code>ActionType</code> of this action.
@property (nonatomic, readonly) enum ZDKActionType type;
/// The action text to display.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// The action uri for when the action is selected.
@property (nonatomic, readonly, copy) NSString * _Nonnull uri;
/// A flag indicating if this action is the default.
@property (nonatomic, readonly, getter=default) BOOL default_;
/// The action fallback uri.
@property (nonatomic, readonly, copy) NSString * _Nonnull fallback;
/// The metadata of this action
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of events that covers all events that could come from <code>ConversationKit</code>.
typedef SWIFT_ENUM(NSInteger, ZDKConversationKitEvent, open) {
/// A connection status change event can come from Reachability or Realtime connection.
  ZDKConversationKitEventConnectionStatusChanged = 0,
/// The <code>User</code> has been updated.
  ZDKConversationKitEventUserUpdated = 1,
/// <code>UserAccess</code> has been revoked.
  ZDKConversationKitEventUserAccessRevoked = 2,
/// <code>Conversation</code> has been updated.
  ZDKConversationKitEventConversationUpdated = 3,
/// New <code>Message</code> received for <code>Conversation</code> with identifier.
  ZDKConversationKitEventNewMessage = 4,
/// Existing <code>Message</code> updated for <code>Conversation</code> with identifier.
  ZDKConversationKitEventMessageUpdated = 5,
/// The push token ‘String’ was stored.
  ZDKConversationKitEventPushTokenPrepared = 6,
/// The result of the call to update the push token <code>String</code> with possible <code>Error</code>.
  ZDKConversationKitEventPushTokenUpdateResult = 7,
/// The result of the login call with possible <code>Error</code>.
  ZDKConversationKitEventLoginResult = 8,
/// The result of the logout call with possible <code>Error</code>.
  ZDKConversationKitEventLogoutResult = 9,
/// The <code>User</code> has been retrieved from storage.
  ZDKConversationKitEventPersistedUserRetrieved = 10,
/// Conversation read activity received from server for <code>conversationId</code>.
  ZDKConversationKitEventConversationReadReceived = 11,
};


SWIFT_CLASS("_TtC25ZendeskSDKConversationKit14ZDKLoginResult")
@interface ZDKLoginResult : NSObject
/// The <code>User</code> object if authentication was successful.
@property (nonatomic, readonly, strong) ZDKUser * _Nullable user;
/// The error that occurred if there was a problem authenticating the <code>User</code>.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper object for Obj-C to return the associated types of the <code>newMessage</code> and <code>messageUpdated</code> events.
SWIFT_CLASS("_TtC25ZendeskSDKConversationKit15ZDKMessageEvent")
@interface ZDKMessageEvent : NSObject
/// The received/updated <code>Message</code>.
@property (nonatomic, readonly, strong) ZDKMessage * _Nonnull message;
/// The identifier of the <code>Conversation</code> that the messages belong to.
@property (nonatomic, readonly, copy) NSString * _Nonnull conversationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC25ZendeskSDKConversationKit17ZDKPushTokenEvent")
@interface ZDKPushTokenEvent : NSObject
/// The push token <code>String</code> that was sent to be updated.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// The error that occurred if there was a problem updating the token.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
