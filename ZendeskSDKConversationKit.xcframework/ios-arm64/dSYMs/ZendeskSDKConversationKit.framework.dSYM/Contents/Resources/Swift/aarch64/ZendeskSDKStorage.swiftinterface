// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZendeskSDKStorage
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import ZendeskSDKLogger
@_exported import ZendeskSDKStorage
import _Concurrency
import _StringProcessing
public struct StorageBuilder {
  public init(namespace: Swift.String, type: ZendeskSDKStorage.StorageType)
  public func build() throws -> ZendeskSDKStorage.Storage
}
@propertyWrapper public class StorableValue<T> where T : Swift.Decodable, T : Swift.Encodable {
  public init(namespace: Swift.String, type: ZendeskSDKStorage.StorageType, key: Swift.String)
  public var wrappedValue: T? {
    get
    set
  }
  @objc deinit
}
public enum StorageType : Swift.String {
  case basic
  case complex
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StorageError : Swift.Error {
  case cannotInitialize
  public static func == (a: ZendeskSDKStorage.StorageError, b: ZendeskSDKStorage.StorageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Storage {
  var namespace: Swift.String { get set }
  func get<D>(forKey key: Swift.String, ofType type: D.Type) -> D? where D : Swift.Decodable, D : Swift.Encodable
  func set<E>(_ object: E, forKey key: Swift.String) where E : Swift.Decodable, E : Swift.Encodable
  func remove(forKey key: Swift.String)
  func clear()
}
extension ZendeskSDKStorage.StorageType : Swift.Equatable {}
extension ZendeskSDKStorage.StorageType : Swift.Hashable {}
extension ZendeskSDKStorage.StorageType : Swift.RawRepresentable {}
extension ZendeskSDKStorage.StorageError : Swift.Equatable {}
extension ZendeskSDKStorage.StorageError : Swift.Hashable {}
